# NOTE: This Makefile assumes that dependencies are installed and, if a virtual
# environment is used, it is activated.

## Variables ##################################################################
# NOTE: Define any variables here if needed in the future

## Documentation ##############################################################
# NOTE: Keep all the targets in alphabetical order for better readability.

default: help

.PHONY: help
help:
	@echo "\nUsage: make [target] ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Available targets:\n"

	@echo "Code Quality ------------------------------------------------------------------"
	@echo "  \033[1m\033[35mformat-lint\033[0m \033[37m(fl)\033[0m: \033[36mRun linter, formatter, spellcheck.\033[0m"
	@echo "  \033[1m\033[35mprecommit-check\033[0m \033[37m(pc)\033[0m: \033[36mRun all pre-commit checks.\033[0m"
	@echo "  \033[1m\033[35msecurity\033[0m \033[37m(s)\033[0m: \033[36mRun security scans.\033[0m"
	@echo "  \033[1m\033[35mtype-check\033[0m \033[37m(tc)\033[0m: \033[36mPerform type checking.\033[0m\n"

	@echo "Deployment --------------------------------------------------------------------"
	@echo "  \033[1m\033[35mbuild-hub-image\033[0m \033[37m(bhi)\033[0m: \033[36mBuild the jupyterhub image.\033[0m"
	@echo "  \033[1m\033[35mbuild-notebook-image\033[0m \033[37m(bni)\033[0m: \033[36mBuild the notebook image.\033[0m"
	@echo "  \033[1m\033[35mclean-docker-image\033[0m \033[37m(cdi)\033[0m: \033[36mRemove the Docker image.\033[0m\n"

	@echo "Environment Management --------------------------------------------------------"
	@echo " \033[1m\033[35masdf-install\033[0m \033[37m(asdfi)\033[0m: \033[36mTry to install tools listed in .tool-versions.\033[0m"
	@echo "  \033[1m\033[35mclean-venv\033[0m \033[37m(cv)\033[0m: \033[36mRemove virtual environment.\033[0m"
	@echo "  \033[1m\033[35minstall\033[0m \033[37m(i)\033[0m: \033[36mInstall app and dependencies.\033[0m"
	@echo "  \033[1m\033[35mvenv\033[0m \033[37m(v)\033[0m: \033[36mCreate virtual environment.\033[0m\n"

	@echo "Testing -----------------------------------------------------------------------"
	@echo "  \033[1m\033[35mtest\033[0m \033[37m(t)\033[0m: \033[36mRun all tests.\033[0m\n"

## Autogenerated Targets ######################################################
# NOTE: Keep all the targets in alphabetical order for better readability.
# NOTE: Do not modify the autogenerated targets, unless necessary, write custom
# targets in the custom section below..

.PHONY: asdf-install asdfi
asdf-install:
	@echo "\nInstalling ASDF Plugins & Tools +++++++++++++++++++++++++++++++++++++++++++++++\n"
	@cat .tool-versions | cut -d' ' -f1 | grep "^[^\#]" | xargs -I {} asdf plugin add {}
	@asdf install

asdfi: asdf-install

.PHONY: build-hub-image bhi
build-hub-image:
	@echo "\nBuilding Docker image +++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@docker build -t elixircloud/jupyterhub:latest -f jupyterhub/hub/hub.Dockerfile .
	@echo "\nDocker image built successfully: elixircloud/jupyterhub:latest\n"

bhi: build-hub-image

.PHONY: build-notebook-image bni
build-notebook-image:
	@echo "\nBuilding Docker image +++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@docker build -t elixircloud/notebook:latest -f jupyterhub/notebook/notebook.Dockerfile .
	@echo "\nDocker image built successfully: elixircloud/notebook:latest\n"

bni: build-notebook-image

.PHONY: clean-docker-image cdi
clean-docker-image:
	@echo "\nRemoving Docker image +++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@docker rmi elixircloud/jupyterhub:latest:latest || echo "Jupyterhub image not found."
	@docker rmi elixircloud/notebook:latest:latest || echo "Notebook image not found."
	@echo "\nDocker image removed successfully (if it existed).\n"

cdi: clean-docker-image

.PHONY: clean-venv cv
clean-venv:
	@echo "\nRemoving the virtual environment ++++++++++++++++++++++++++++++++++++++++++++++\n"
	@rm -rf .venv

cv: clean-venv

.PHONY: format-lint fl
format-lint:
	@echo "\nRunning linter and formatter using ruff and typos +++++++++++++++++++++++++++++\n"
	@poetry run ruff format && poetry run ruff check --fix
	@typos .

fl: format-lint

.PHONY: install i
install:
	@echo "\nInstalling this package its dependencies +++++++++++++++++++++++++++++++++\n"
	@poetry install --with=code_quality,misc,test,types,vulnerability --no-root

i: install

.PHONY: precommit-check pc
precommit-check:
	@echo "\nRunning pre-commit checks +++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run pre-commit run --all-files

pc: precommit-check

.PHONY: security s
security:
	@echo "\nRunning security scans using bandit and safety ++++++++++++++++++++++++++++++++\n"
	@poetry run safety check --full-report
	@poetry run bandit -c pyproject.toml -r jupyterhub

s: security

.PHONY: test t
test:
	@echo "\nRunning tests using pytest ++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run pytest tests/

t: test

.PHONY: type-check tc
type-check:
	@echo "\nPerforming type checking with mypy ++++++++++++++++++++++++++++++++++++++++++++\n"
	@poetry run mypy jupyterhub

tc: type-check

.PHONY: venv v
venv:
	@echo "\nCreating a virtual environment ++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@python -m venv .venv
	@echo "\nSummary +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
	@echo "Virtual environment created successfully."
	@echo "To activate the environment for this shell session, run:"
	@echo "source .venv/bin/activate"

v: venv

## Custom Targets #############################################################
# NOTE: Keep all the targets in alphabetical order for better readability.
# NOTE: Add any custom targets here if needed in the future.
